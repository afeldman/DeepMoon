#!/usr/bin/env python

import h5py
import click
import numpy as np
import pathlib
import multiprocessing as mp
import tqdm
from PIL import Image


def np_elem(element):
    return np.asarray(Image.open(element), dtype=np.uint8), np.asarray(Image.open(element.parent / "mask" / element.name), dtype=np.uint8), np.uint32(element.stem)

class H5handler:
    def __init__(self, process_number, output, x,y,input):
        self.pool = mp.Pool(process_number)
        self.lock = mp.Lock()
        self.h5file = h5py.File(output, "w")
        self.images = self.h5file.create_dataset("image", shape=(len(input), x,y), chunks=(1,x,y), compression="lzf", dtype=np.uint8)
        self.masks = self.h5file.create_dataset("mask", shape=(len(input), x,y), chunks=(1,x,y), compression="lzf", dtype=np.uint8)
        self.names = self.h5file.create_dataset("names", shape=(len(input),), chunks=(1,), compression="lzf", dtype=np.uint32)
        self.counter = 0
        self.pbar=tqdm.tqdm(total=len(input))
    
    def close(self):
        self.h5file.close()
        self.pbar.close()

    def schedule(self, function, args):
        if not isinstance(args, tuple):
            args = tuple(args)
        self.pool.apply_async(function, args=args, callback=self.results)

    def wait(self):
        self.pool.close()
        self.pool.join()

    def results(self, result):
        #print(f"{((self.counter/self.max_)*100):.2f}%", end="\r")
        with self.lock:
            self.pbar.set_description(f"packing: {str(result[2])}") 
            self.images[self.counter,...] = result[0]
            self.masks[self.counter,...] = result[1]
            self.names[self.counter] = result[2]
            self.counter += 1
            self.images.flush()
            self.masks.flush()
            self.names.flush()
            self.pbar.update()

@click.command()
@click.argument("input")
@click.argument("output")
def main(input, output):
    input = pathlib.Path(input)
    output = pathlib.Path(output)

    input = list(input.glob("*.png"))

    print("build h5 file")
    x,y = np.asarray(Image.open(input[0])).shape

    executor = H5handler(2*(mp.cpu_count()-1), output, x,y, input)

    for element in input:
        executor.schedule(np_elem, (element,)) 
    executor.wait()    
    executor.close()

if __name__=="__main__":
    main()
